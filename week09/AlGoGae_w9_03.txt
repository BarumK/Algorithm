- 동적 프로그래밍 들어가기 전에
동적 프로그래밍은 분할 정복 전략, 탐욕적 알고리즘이랑 비슷함
분할 정복 전략이랑 비슷한 부분은 "큰 문제를 작은 문제로 나눠 그 작은 문제를 해결한 후 그 해결한 것을 바탕으로 큰 문제를 해결한다"임
    -> 대신 수행 시간을 줄이기 위해 동적 프로그래밍을 사용함
동적 프로그래밍과 탐욕적 알고리즘은 둘 다 최적화 문제라는 문제 해결에 사용되는 전략임
최적화?
    최적의 해를 찾는 문제. 보통 특정 문제에 대한 해가 여러 개 존재할 때 그 중에서 가장 이상적인 해를 뽑아내는 과정임
    예) 거리 최소, 이익 최대 등
이번 시간은 동적 프로그래밍과 분할 정복 전략과의 차이점을 설명할 예정

- 동적 프로그래밍(dynamic programming)이란?
복잡한 문제(problem)를
(1) 간단한 부분 문제(sub-problem)들로 분할하고,
(2) 각 부분 문제에 대한 부분 해를 찾은 후 (필요 시) 재사용을 위해 기록(tabulation or memoization)하는 과정을 반복하여 모든 부분 해들을 찾고,
(3) 이들을 통합하여 원래 문제의 해결책(solution)을 찾는 전략
vs. 분할 정복 전략: 필요 시 재사용을 위해 기록한다는 것이 추가되었다는 점
프로그래밍(programming)의 의미는 과정(course)을 테이블에 기록(table-filling), 동적(dynamic)의 의미는 테이블이 갱신(update)된다는 것
큰 문제 안에 작은 문제가 중첩되어 있는 문제를 해결하는 데 사용함
일련의 연속적인 부분 해 선택이 필요한 문제가 주어졌을 때, 선택을 해야 할 순간마다 기록된 이전의 모든 선택들에 대해 고려하여(필요 시 이전의 선택을 수정)
최적의 부분 해를 선택함으로써 최종 해를 도출하는 알고리즘
vs. 탐욕적 알고리즘: 탐욕적 알고리즘은 이전의 선택들을 고려 안함. 모든 선택들에 대한 조합을 고려하지 않고 매 순간마다 현 순간에 좋은 최적해만 찾고자 함
따라서 탐욕적 알고리즘은 최적의 해를 찾을 수 없을수도 있다는 단점이 있음
if 탐욕적 알고리즘이 최적의 최종 해를 도출해낼 수 있다는 것이 증명된다면 동적 프로그래밍보다 탐욕적 알고리즘이 수행 시간 측면에서 더 좋음
    -> 단, 증명을 해야 함
